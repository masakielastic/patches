diff --git a/ext/json/json.c b/ext/json/json.c
index 5360841..39db1b8 100644
--- a/ext/json/json.c
+++ b/ext/json/json.c
@@ -103,7 +103,9 @@ static PHP_MINIT_FUNCTION(json)
 	REGISTER_LONG_CONSTANT("JSON_PRETTY_PRINT", PHP_JSON_PRETTY_PRINT, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("JSON_UNESCAPED_UNICODE", PHP_JSON_UNESCAPED_UNICODE, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("JSON_PARTIAL_OUTPUT_ON_ERROR", PHP_JSON_PARTIAL_OUTPUT_ON_ERROR, CONST_CS | CONST_PERSISTENT);
-
+ 	REGISTER_LONG_CONSTANT("JSON_NOTUTF8_SUBSTITUTE", PHP_JSON_NOTUTF8_SUBSTITUTE, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("JSON_NOTUTF8_IGNORE", PHP_JSON_NOTUTF8_IGNORE, CONST_CS | CONST_PERSISTENT);
+ 
 	REGISTER_LONG_CONSTANT("JSON_ERROR_NONE", PHP_JSON_ERROR_NONE, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("JSON_ERROR_DEPTH", PHP_JSON_ERROR_DEPTH, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("JSON_ERROR_STATE_MISMATCH", PHP_JSON_ERROR_STATE_MISMATCH, CONST_CS | CONST_PERSISTENT);
@@ -358,50 +360,81 @@ static void json_encode_array(smart_str *buf, zval **val, int options TSRMLS_DC)
 }
 /* }}} */
 
-static int json_utf8_to_utf16(unsigned short *utf16, char utf8[], int len) /* {{{ */
+static int json_utf8_to_utf32(unsigned int *utf32, char utf8[], int utf8_len, int options) /* {{{ */
 {
-	size_t pos = 0, us;
-	int j, status;
-
-	if (utf16) {
-		/* really convert the utf8 string */
-		for (j=0 ; pos < len ; j++) {
-			us = php_next_utf8_char((const unsigned char *)utf8, len, &pos, &status);
-			if (status != SUCCESS) {
-				return -1;
-			}
-			/* From http://en.wikipedia.org/wiki/UTF16 */
-			if (us >= 0x10000) {
-				us -= 0x10000;
-				utf16[j++] = (unsigned short)((us >> 10) | 0xd800);
-				utf16[j] = (unsigned short)((us & 0x3ff) | 0xdc00);
+	size_t pos = 0;
+	int len = 0, status;
+	unsigned int code_point;
+
+	while (pos < utf8_len) {
+ 
+		code_point = php_next_utf8_char((const unsigned char *) utf8, utf8_len, &pos, &status);
+ 
+		if (status == FAILURE) {
+
+			if (options & PHP_JSON_NOTUTF8_SUBSTITUTE) {
+				/* Unicode Character 'REPLACEMENT CHARACTER' (U+FFFD) */
+				code_point = 0xfffd;
+			} else if (options & PHP_JSON_NOTUTF8_IGNORE) {
+				/* ignore this invalid character */
+				continue;
 			} else {
-				utf16[j] = (unsigned short)us;
+				return -1;
 			}
+
 		}
-	} else {
-		/* Only check if utf8 string is valid, and compute utf16 lenght */
-		for (j=0 ; pos < len ; j++) {
-			us = php_next_utf8_char((const unsigned char *)utf8, len, &pos, &status);
-			if (status != SUCCESS) {
+ 
+		utf32[len++] = code_point;
+	}
+ 
+	return len;
+}
+/* }}} */
+
+static int json_utf8_to_utf16(unsigned short *utf16, char utf8[], int utf8_len, int options) /* {{{ */
+{
+	int len = 0, status;
+ 	unsigned int code_point;
+	size_t pos = 0;
+
+	while (pos < utf8_len) {
+		code_point = php_next_utf8_char((const unsigned char *) utf8, utf8_len, &pos, &status);
+ 
+		if (status == FAILURE) {
+
+			if (options & PHP_JSON_NOTUTF8_SUBSTITUTE) {
+				/* Unicode Character 'REPLACEMENT CHARACTER' (U+FFFD) */
+				code_point = 0xfffd;
+			} else if (options & PHP_JSON_NOTUTF8_IGNORE) {
+				/* ignore this invalid character */
+				continue;
+			} else {
 				return -1;
 			}
-			if (us >= 0x10000) {
-				j++;
-			}
+
+		}
+ 
+		/* From http://en.wikipedia.org/wiki/UTF16 */
+		if (code_point < 0x10000) {
+			utf16[len++] = (unsigned short) code_point;
+		} else {
+			code_point -= 0x10000;
+			utf16[len++] = (unsigned short) ((code_point >> 10) | 0xd800);
+			utf16[len++] = (unsigned short) ((code_point & 0x3ff) | 0xdc00);
 		}
 	}
-	return j;
+ 
+	return len;
 }
 /* }}} */
 
 
 static void json_escape_string(smart_str *buf, char *s, int len, int options TSRMLS_DC) /* {{{ */
 {
-	int pos = 0, ulen = 0;
-	unsigned short us;
-	unsigned short *utf16;
-	size_t newlen;
+	size_t pos = 0, old_pos, char_len, newlen;
+	unsigned int us, *utf32;
+	unsigned short w1, w2;
+	int status;
 
 	if (len == 0) {
 		smart_str_appendl(buf, "\"\"", 2);
@@ -432,13 +465,20 @@ static void json_escape_string(smart_str *buf, char *s, int len, int options TSR
 
 	}
 
-	utf16 = (options & PHP_JSON_UNESCAPED_UNICODE) ? NULL : (unsigned short *) safe_emalloc(len, sizeof(unsigned short), 0);
-	ulen = json_utf8_to_utf16(utf16, s, len);
-	if (ulen <= 0) {
-		if (utf16) {
-			efree(utf16);
+	if (!((options & PHP_JSON_NOTUTF8_SUBSTITUTE) || (options & PHP_JSON_NOTUTF8_IGNORE))) {
+		utf32 = (unsigned int *) safe_emalloc(len, sizeof(unsigned int), 0);
+		len = json_utf8_to_utf32(utf32, s, len, options);	
+	}
+
+	if (len <= 0) {
+
+		if (!((options & PHP_JSON_NOTUTF8_SUBSTITUTE) || (options & PHP_JSON_NOTUTF8_IGNORE))) {
+			if (utf32) {
+				efree(utf32);
+			}
 		}
-		if (ulen < 0) {
+
+		if (len < 0) {
 			JSON_G(error_code) = PHP_JSON_ERROR_UTF8;
 			smart_str_appendl(buf, "null", 4);
 		} else {
@@ -446,9 +486,6 @@ static void json_escape_string(smart_str *buf, char *s, int len, int options TSR
 		}
 		return;
 	}
-	if (!(options & PHP_JSON_UNESCAPED_UNICODE)) {
-		len = ulen;
-	}
 
 	/* pre-allocate for string length plus 2 quotes */
 	smart_str_alloc(buf, len+2, 0);
@@ -456,7 +493,26 @@ static void json_escape_string(smart_str *buf, char *s, int len, int options TSR
 
 	while (pos < len)
 	{
-		us = (options & PHP_JSON_UNESCAPED_UNICODE) ? s[pos++] : utf16[pos++];
+		if ((options & PHP_JSON_NOTUTF8_SUBSTITUTE) || (options & PHP_JSON_NOTUTF8_IGNORE)) {
+
+			old_pos = pos;
+			us = php_next_utf8_char((const unsigned char *) s, len, &pos, &status);
+			char_len = pos - old_pos;
+
+			if (status == FAILURE) {
+				if (options & PHP_JSON_NOTUTF8_SUBSTITUTE) {
+					/* Unicode Character 'REPLACEMENT CHARACTER' (U+FFFD) */
+					us = 0xfffd;
+					char_len = 3;
+				} else if (options & PHP_JSON_NOTUTF8_IGNORE) {
+					/* ignore this invalid character */
+					continue;
+				}
+			}
+ 
+		} else {
+			us = utf32[pos++];
+		}
 
 		switch (us)
 		{
@@ -533,23 +589,86 @@ static void json_escape_string(smart_str *buf, char *s, int len, int options TSR
 				break;
 
 			default:
-				if (us >= ' ' && ((options & PHP_JSON_UNESCAPED_UNICODE) || (us & 127) == us)) {
-					smart_str_appendc(buf, (unsigned char) us);
-				} else {
+				if (us < 0x20) {
+					smart_str_appendl(buf, "\\u", 2);
+					smart_str_appendc(buf, digits[(us >> 12) & 0xf]);
+					smart_str_appendc(buf, digits[(us >> 8) & 0xf]);
+					smart_str_appendc(buf, digits[(us >> 4) & 0xf]);
+					smart_str_appendc(buf, digits[(us & 0xf)]);
+				} else if (us < 0x80) {
+					smart_str_appendc(buf, us);
+				} else if (options & PHP_JSON_UNESCAPED_UNICODE) {
+
+					if ((options & PHP_JSON_NOTUTF8_SUBSTITUTE) || (options & PHP_JSON_NOTUTF8_IGNORE)) {
+
+						if (char_len == 2) {
+							smart_str_appendc(buf, s[pos - 2]);
+							smart_str_appendc(buf, us);
+						} else if (char_len == 3) {
+							if (status == SUCCESS) {
+								smart_str_appendc(buf, s[pos - 3]);
+								smart_str_appendc(buf, s[pos - 2]);
+								smart_str_appendc(buf, us);
+							} else {
+								smart_str_appendl(buf, "\xEF\xBF\xBD", 3);			
+							}
+						} else {
+							smart_str_appendc(buf, s[pos - 4]);
+							smart_str_appendc(buf, s[pos - 3]);
+							smart_str_appendc(buf, s[pos - 2]);
+							smart_str_appendc(buf, us);
+						}
+
+					} else {
+ 
+						if (us < 0x800) {
+							smart_str_appendc(buf, 0xc0 | (us >> 6));
+							smart_str_appendc(buf, 0x80 | (us & 0x3f));
+	   					} else if (us < 0x10000) {
+							smart_str_appendc(buf, 0xe0 | (us >> 12));
+							smart_str_appendc(buf, 0x80 | ((us >> 6) & 0x3f));
+							smart_str_appendc(buf, 0x80 | (us & 0x3f));
+						} else {
+							smart_str_appendc(buf, 0xf0 | (us >> 18));
+							smart_str_appendc(buf, 0x80 | ((us >> 12) & 0x3f));
+							smart_str_appendc(buf, 0x80 | ((us >> 6) & 0x3f));
+							smart_str_appendc(buf, 0x80 | (us & 0x3f));
+						}
+					}
+
+				} else if (us < 0x10000) {
 					smart_str_appendl(buf, "\\u", 2);
-					smart_str_appendc(buf, digits[(us & 0xf000) >> 12]);
-					smart_str_appendc(buf, digits[(us & 0xf00)  >> 8]);
-					smart_str_appendc(buf, digits[(us & 0xf0)   >> 4]);
+					smart_str_appendc(buf, digits[(us >> 12) & 0xf]);
+					smart_str_appendc(buf, digits[(us >> 8) & 0xf]);
+					smart_str_appendc(buf, digits[(us >> 4) & 0xf]);
 					smart_str_appendc(buf, digits[(us & 0xf)]);
+				} else {
+					us -= 0x10000;
+					w1 = (unsigned short) ((us >> 10) | 0xd800);
+					w2 = (unsigned short) ((us & 0x3ff) | 0xdc00);
+					smart_str_appendl(buf, "\\u", 2);
+					smart_str_appendc(buf, digits[(w1 >> 12) & 0xf]);
+					smart_str_appendc(buf, digits[(w1 >> 8) & 0xf]);
+					smart_str_appendc(buf, digits[(w1 >> 4) & 0xf]);
+					smart_str_appendc(buf, digits[(w1 & 0xf)]);	
+					smart_str_appendl(buf, "\\u", 2);
+					smart_str_appendc(buf, digits[(w2 >> 12) & 0xf]);
+					smart_str_appendc(buf, digits[(w2 >> 8) & 0xf]);
+					smart_str_appendc(buf, digits[(w2 >> 4) & 0xf]);
+					smart_str_appendc(buf, digits[(w2 & 0xf)]);
 				}
 				break;
 		}
 	}
 
 	smart_str_appendc(buf, '"');
-	if (utf16) {
-		efree(utf16);
+
+	if (!((options & PHP_JSON_NOTUTF8_SUBSTITUTE) || (options & PHP_JSON_NOTUTF8_IGNORE))) {
+		if (utf32) {
+			efree(utf32);
+		}
 	}
+
 }
 /* }}} */
 
@@ -670,7 +789,7 @@ PHP_JSON_API void php_json_decode_ex(zval *return_value, char *str, int str_len,
 
 	utf16 = (unsigned short *) safe_emalloc((str_len+1), sizeof(unsigned short), 1);
 
-	utf16_len = json_utf8_to_utf16(utf16, str, str_len);
+	utf16_len = json_utf8_to_utf16(utf16, str, str_len, options);
 	if (utf16_len <= 0) {
 		if (utf16) {
 			efree(utf16);
@@ -869,4 +988,4 @@ static PHP_FUNCTION(json_last_error_msg)
  * End:
  * vim600: noet sw=4 ts=4 fdm=marker
  * vim<600: noet sw=4 ts=4
- */
+ */
\ No newline at end of file
diff --git a/ext/json/php_json.h b/ext/json/php_json.h
index ec707ce..2360278 100644
--- a/ext/json/php_json.h
+++ b/ext/json/php_json.h
@@ -65,6 +65,8 @@ extern zend_class_entry *php_json_serializable_ce;
 #define PHP_JSON_PRETTY_PRINT	(1<<7)
 #define PHP_JSON_UNESCAPED_UNICODE	(1<<8)
 #define PHP_JSON_PARTIAL_OUTPUT_ON_ERROR (1<<9)
+#define PHP_JSON_NOTUTF8_SUBSTITUTE (1<<10)
+#define PHP_JSON_NOTUTF8_IGNORE (1<<11)
 
 /* Internal flags */
 #define PHP_JSON_OUTPUT_ARRAY	0
